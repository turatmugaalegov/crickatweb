{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class EventService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://dry-caverns-85169-185a985df7fb.herokuapp.com/api/v1.0';\n  }\n  getAllEvents() {}\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/auth/login`, {\n      username,\n      password\n    });\n  }\n  register(username, name, email, password) {\n    return this.http.post(`${this.apiUrl}/auth/register`, {\n      username,\n      name,\n      email,\n      password\n    });\n  }\n  getUserRole() {\n    return \"event_host\";\n  }\n  static #_ = this.ɵfac = function EventService_Factory(t) {\n    return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventService,\n    factory: EventService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","httpOptions","headers","EventService","constructor","http","apiUrl","getAllEvents","login","username","password","post","register","name","email","getUserRole","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/timn/Documents/Studium/Semester 3/Crickat Github/crickatweb/src/app/data/event-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nconst httpOptions = {\n    headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n    })\n}\n\n\n@Injectable({\n    providedIn: 'root'\n  })\n  export class EventService {\n    private apiUrl = 'https://dry-caverns-85169-185a985df7fb.herokuapp.com/api/v1.0'; \n  \n    constructor(private http: HttpClient) { }\n\n    getAllEvents() {\n        \n    }\n  \n    login(username: string, password: string) {\n      return this.http.post<any>(`${this.apiUrl}/auth/login`, { username, password });\n    }\n\n    register(username: string, name: string, email: string, password: string) {\n      return this.http.post<any>(`${this.apiUrl}/auth/register`, { username, name, email, password});\n    }\n\n    getUserRole() {\n      return \"event_host\";\n    }\n\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAE9D,MAAMC,WAAW,GAAG;EAChBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IACrB,cAAc,EAAE;GACnB;CACJ;AAMC,OAAM,MAAOG,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,+DAA+D;EAExC;EAExCC,YAAYA,CAAA,GAEZ;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,aAAa,EAAE;MAAEG,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACjF;EAEAE,QAAQA,CAACH,QAAgB,EAAEI,IAAY,EAAEC,KAAa,EAAEJ,QAAgB;IACtE,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,gBAAgB,EAAE;MAAEG,QAAQ;MAAEI,IAAI;MAAEC,KAAK;MAAEJ;IAAQ,CAAC,CAAC;EAChG;EAEAK,WAAWA,CAAA;IACT,OAAO,YAAY;EACrB;EAAC,QAAAC,CAAA,G;qBAnBUb,YAAY,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZlB,YAAY;IAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}