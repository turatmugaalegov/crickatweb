{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://dry-caverns-85169-185a985df7fb.herokuapp.com/api/v1.0';\n    this.events = [];\n    this.showFavoritesOnly = false;\n  }\n  createEvent(name, date, type, ageRating, ticketPrice, location) {\n    const token = localStorage.getItem('token'); // Retrieve the stored token\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token // Include the token in the Authorization header\n    });\n\n    return this.http.post(`${this.apiUrl}/create-event`, {\n      name,\n      date,\n      type,\n      ageRating,\n      ticketPrice,\n      location\n    }, {\n      headers: headers,\n      withCredentials: true\n    });\n  }\n  updateEvent(eventId, updatedEvent) {\n    const token = localStorage.getItem('token'); // Retrieve the stored token\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token // Include the token in the Authorization header\n    });\n    // Führe eine PUT-Anfrage aus, um das Event zu aktualisieren\n    return this.http.put(`${this.apiUrl}/edit-event/${eventId}`, updatedEvent, {\n      headers: headers,\n      withCredentials: true\n    });\n  }\n  getEvents() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const query = {\n      query: `\n        query {\n          allEvents {\n            events {\n              name\n              date\n              type\n              ageRating\n              ticketPrice\n              location\n            }\n          }\n        }\n      `\n    };\n    return this.http.post(this.apiUrl + '/graphql', query, {\n      headers\n    }).pipe(map(response => response.data.allEvents));\n  }\n  markAsFavorite(eventId) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    });\n    const body = {}; // You can add any necessary data to the request body\n    return this.http.post(`${this.apiUrl}/favorite-event/${eventId}`, body, {\n      headers\n    });\n  }\n  getEventsForUser() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token // Include the token in the Authorization header\n    });\n\n    return this.http.get(`${this.apiUrl}/events/myevents}`, {\n      headers: headers\n    });\n  }\n  static #_ = this.ɵfac = function EventService_Factory(t) {\n    return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventService,\n    factory: EventService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpHeaders","map","EventService","constructor","http","apiUrl","events","showFavoritesOnly","createEvent","name","date","type","ageRating","ticketPrice","location","token","localStorage","getItem","headers","post","withCredentials","updateEvent","eventId","updatedEvent","put","getEvents","query","pipe","response","data","allEvents","markAsFavorite","body","getEventsForUser","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["/Users/timn/Documents/Studium/Semester 3/Crickat Github/crickatweb/src/app/data/event-service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { map } from 'rxjs/operators';\nimport { EventResponse } from \"../graphql/eventresponse\";\nimport { Observable } from \"rxjs\";\n\n\n@Injectable()\nexport class EventService {\n  private apiUrl = 'https://dry-caverns-85169-185a985df7fb.herokuapp.com/api/v1.0'; \n\n  events: Event[] = [];\n\n  showFavoritesOnly: boolean = false;\n\n  constructor(private http: HttpClient) { }\n\n\n\n  createEvent(name: string, date: string, type: string, ageRating: String, ticketPrice: number, location: string) {\n    const token = localStorage.getItem('token'); // Retrieve the stored token\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token // Include the token in the Authorization header\n    });\n    return this.http.post<any>(`${this.apiUrl}/create-event`, { name, date, type, ageRating, ticketPrice, location}, { headers: headers, withCredentials: true });\n  }\n\n  updateEvent(eventId: string, updatedEvent: any) {\n    const token = localStorage.getItem('token'); // Retrieve the stored token\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token // Include the token in the Authorization header\n    });\n  \n    // Führe eine PUT-Anfrage aus, um das Event zu aktualisieren\n    return this.http.put<any>(`${this.apiUrl}/edit-event/${eventId}`, updatedEvent, { headers: headers, withCredentials: true });\n  }\n\n  getEvents() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  \n    const query = {\n      query: `\n        query {\n          allEvents {\n            events {\n              name\n              date\n              type\n              ageRating\n              ticketPrice\n              location\n            }\n          }\n        }\n      `\n    };\n    \n    return this.http.post<EventResponse>(this.apiUrl + '/graphql', query, { headers })\n      .pipe(\n        map(response => response.data.allEvents)\n      );\n  }\n\n  markAsFavorite(eventId: number): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    });\n  \n    const body = {}; // You can add any necessary data to the request body\n  \n    return this.http.post(`${this.apiUrl}/favorite-event/${eventId}`, body, { headers });\n  }\n\n  getEventsForUser(): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token // Include the token in the Authorization header\n    });\n    return this.http.get(`${this.apiUrl}/events/myevents}`, { headers: headers });\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}