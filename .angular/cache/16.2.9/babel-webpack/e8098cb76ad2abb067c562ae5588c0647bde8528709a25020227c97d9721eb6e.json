{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data/user-service\";\nimport * as i2 from \"@angular/material/input\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/forms\";\nexport class RegisterComponent {\n  constructor(userService) {\n    this.userService = userService;\n    this.registerForm = new FormGroup({\n      username: new FormControl('', Validators.required),\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required)\n    });\n  }\n  ngOnInit() {}\n  register() {\n    if (this.registerForm.valid) {\n      this.userService.register(this.registerForm.value.username, this.registerForm.value.name, this.registerForm.value.email, this.registerForm.value.password).subscribe(response => {\n        // Handle response, save the token, etc.\n        console.log(response);\n      }, error => {\n        // Handle error\n        console.error(error);\n      });\n    } else {\n      // Handle form validation error\n    }\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 25,\n    vars: 1,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [\"matInput\", \"\", \"formControlName\", \"name\"], [\"type\", \"email\", \"matInput\", \"\", \"formControlName\", \"email\"], [\"type\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-header\")(2, \"h1\");\n        i0.ɵɵtext(3, \"Account erstellen\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"mat-card-content\")(5, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.register();\n        });\n        i0.ɵɵelementStart(6, \"mat-form-field\")(7, \"mat-label\");\n        i0.ɵɵtext(8, \"Benutzername\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-form-field\")(11, \"mat-label\");\n        i0.ɵɵtext(12, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-form-field\")(15, \"mat-label\");\n        i0.ɵɵtext(16, \"E-Mail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-form-field\")(19, \"mat-label\");\n        i0.ɵɵtext(20, \"Passwort\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\")(23, \"button\", 5);\n        i0.ɵɵtext(24, \"Register\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      }\n    },\n    dependencies: [i2.MatInput, i3.MatFormField, i3.MatLabel, i4.MatCard, i4.MatCardContent, i4.MatCardHeader, i5.MatButton, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName],\n    styles: [\"mat-card[_ngcontent-%COMP%] {\\n    margin: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7QUFDaEIiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtY2FyZCB7XG4gICAgbWFyZ2luOiAyMHB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["FormGroup","FormControl","Validators","RegisterComponent","constructor","userService","registerForm","username","required","name","email","password","ngOnInit","register","valid","value","subscribe","response","console","log","error","_","i0","ɵɵdirectiveInject","i1","UserService","_2","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_5_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["/Users/timn/Documents/Studium/Semester 3/Crickat Github/crickatweb/src/app/register/register.component.ts","/Users/timn/Documents/Studium/Semester 3/Crickat Github/crickatweb/src/app/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../data/user-service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n\n  constructor(private userService: UserService) {\n    this.registerForm = new FormGroup({\n      username: new FormControl('', Validators.required), // You can add more validators as needed\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required)\n    });\n  }\n\n  ngOnInit() { }\n\n\n  register(): void {\n    if (this.registerForm.valid) {\n      this.userService.register(this.registerForm.value.username, this.registerForm.value.name, this.registerForm.value.email, this.registerForm.value.password).subscribe(\n        response => {\n          // Handle response, save the token, etc.\n          console.log(response);\n        },\n        error => {\n          // Handle error\n          console.error(error);\n        }\n      );\n    } else {\n      // Handle form validation error\n    }\n  }\n\n\n\n\n}\n","<mat-card>\n    <mat-card-header>\n        <h1>Account erstellen</h1>\n    </mat-card-header>\n    <mat-card-content>\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n            <mat-form-field>\n                <mat-label>Benutzername</mat-label>\n                <input matInput formControlName=\"username\">\n            </mat-form-field>\n            <mat-form-field>\n                <mat-label>Name</mat-label>\n                <input matInput formControlName=\"name\">\n            </mat-form-field>\n            <mat-form-field>\n                <mat-label>E-Mail</mat-label>\n                <input type=\"email\" matInput formControlName=\"email\">\n            </mat-form-field>\n            <mat-form-field>\n                <mat-label>Passwort</mat-label>\n                <input type=\"password\" matInput formControlName=\"password\">\n            </mat-form-field>\n            <div>\n                <button mat-raised-button color=\"primary\" type=\"submit\">Register</button>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}