{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"../service/auth.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/radio\";\nimport * as i9 from \"@angular/material/button\";\nexport class RegisterComponent {\n  constructor(builder, toastr, service, router) {\n    this.builder = builder;\n    this.toastr = toastr;\n    this.service = service;\n    this.router = router;\n    this.registerform = this.builder.group({\n      id: this.builder.control('', Validators.compose([Validators.required, Validators.minLength(5)])),\n      name: this.builder.control('', Validators.required),\n      password: this.builder.control('', Validators.compose([Validators.required])),\n      email: this.builder.control('', Validators.compose([Validators.required, Validators.email])),\n      gender: this.builder.control('male'),\n      role: this.builder.control(''),\n      isactive: this.builder.control(false)\n    });\n  }\n  proceedregistration() {\n    if (this.registerform.valid) {\n      this.service.Proceedregister(this.registerform.value).subscribe(res => {\n        this.toastr.success('Please contact admin for enable access', 'Registered Successfully');\n        this.router.navigate(['login']);\n      });\n    } else {\n      this.toastr.warning('Please enter valid data');\n    }\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ToastrService), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 33,\n    vars: 1,\n    consts: [[1, \"example-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"example-full-width\"], [\"matInput\", \"\", \"formControlName\", \"id\"], [\"matInput\", \"\", \"formControlName\", \"name\"], [\"type\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\"], [\"type\", \"email\", \"matInput\", \"\", \"formControlName\", \"email\"], [\"formControlName\", \"gender\", \"aria-label\", \"Select an option\"], [\"value\", \"male\"], [\"value\", \"female\"], [\"mat-raised-button\", \"\", \"color\", \"primary\"], [\"routerLink\", \"/login\", \"mat-raised-button\", \"\", \"color\", \"accent\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-header\")(2, \"h1\");\n        i0.ɵɵtext(3, \"User Registration\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"mat-card-content\")(5, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.proceedregistration();\n        });\n        i0.ɵɵelementStart(6, \"mat-form-field\", 1)(7, \"mat-label\");\n        i0.ɵɵtext(8, \"User Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-form-field\", 1)(11, \"mat-label\");\n        i0.ɵɵtext(12, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-form-field\", 1)(15, \"mat-label\");\n        i0.ɵɵtext(16, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-form-field\", 1)(19, \"mat-label\");\n        i0.ɵɵtext(20, \"E-Mail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\")(23, \"mat-radio-group\", 6)(24, \"mat-radio-button\", 7);\n        i0.ɵɵtext(25, \"Male\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"mat-radio-button\", 8);\n        i0.ɵɵtext(27, \"Female\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(28, \"div\")(29, \"button\", 9);\n        i0.ɵɵtext(30, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"a\", 10);\n        i0.ɵɵtext(32, \"Back to Login\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerform);\n      }\n    },\n    dependencies: [i4.RouterLink, i5.MatInput, i6.MatFormField, i6.MatLabel, i7.MatCard, i7.MatCardContent, i7.MatCardHeader, i8.MatRadioGroup, i8.MatRadioButton, i9.MatAnchor, i9.MatButton, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","RegisterComponent","constructor","builder","toastr","service","router","registerform","group","id","control","compose","required","minLength","name","password","email","gender","role","isactive","proceedregistration","valid","Proceedregister","value","subscribe","res","success","navigate","warning","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","ToastrService","i3","AuthService","i4","Router","_2","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_5_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["/Users/timn/Documents/Studium/Semester 3/Crickat Github/crickatweb/src/app/register/register.component.ts","/Users/timn/Documents/Studium/Semester 3/Crickat Github/crickatweb/src/app/register/register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from '../service/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  constructor(private builder: FormBuilder, private toastr: ToastrService,\n    private service: AuthService, private router: Router) {\n\n  }\n\n  registerform = this.builder.group({\n    id: this.builder.control('', Validators.compose([Validators.required, Validators.minLength(5)])),\n    name: this.builder.control('', Validators.required),\n    password: this.builder.control('', Validators.compose([Validators.required])),\n    email: this.builder.control('', Validators.compose([Validators.required, Validators.email])),\n    gender: this.builder.control('male'),\n    role: this.builder.control(''),\n    isactive: this.builder.control(false)\n  });\n\n  proceedregistration() {\n    if (this.registerform.valid) {\n      this.service.Proceedregister(this.registerform.value).subscribe(res => {\n        this.toastr.success('Please contact admin for enable access','Registered Successfully');\n        this.router.navigate(['login']);\n      });\n\n    } else {\n      this.toastr.warning('Please enter valid data');\n    }\n  }\n\n}\n","<mat-card>\n    <mat-card-header>\n        <h1>User Registration</h1>\n    </mat-card-header>\n    <mat-card-content>\n        <form class=\"example-form\" [formGroup]=\"registerform\" (ngSubmit)=\"proceedregistration()\">\n            <mat-form-field class=\"example-full-width\">\n              <mat-label>User Name</mat-label>\n              <input matInput formControlName=\"id\">\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>Name</mat-label>\n                <input matInput formControlName=\"name\">\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>Password</mat-label>\n                <input type=\"password\" matInput formControlName=\"password\">\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>E-Mail</mat-label>\n                <input type=\"email\" matInput formControlName=\"email\">\n            </mat-form-field>\n            <div>\n                <mat-radio-group formControlName=\"gender\" aria-label=\"Select an option\">\n                    <mat-radio-button value=\"male\">Male</mat-radio-button>\n                    <mat-radio-button value=\"female\">Female</mat-radio-button>\n                  </mat-radio-group>\n            </div>\n            <div>\n                <button mat-raised-button color=\"primary\">Submit</button>\n                <a routerLink=\"/login\" mat-raised-button color=\"accent\">Back to Login</a>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}